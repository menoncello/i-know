name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.3.1'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .bun/install/cache
            node_modules
            .turbo
          key: ${{ runner.os }}-node-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type checking
        run: bun run type-check

      - name: Linting
        run: bun run lint

      - name: Code formatting check
        run: bun run format:check

      - name: Run tests
        run: bun run test

      - name: Run E2E tests
        run: bun run test:e2e
        continue-on-error: true

  # Build Applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .bun/install/cache
            node_modules
            .turbo
          key: ${{ runner.os }}-node-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build all applications
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/dist/
            apps/api/dist/
            apps/scraper/dist/
          retention-days: 7

  # Security Scanning
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Run security audit
        run: bun audit

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Database Operations (for migrations/seeds)
  database:
    name: Database Operations
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'

    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: bun run db:migrate

      - name: Seed database
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
        run: bun run db:seed

  # Deploy to Staging (for develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security, database]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add Railway or other deployment logic here
          # Example: railway up --service-name=i-know-staging

  # Deploy to Production (for main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add Railway or other deployment logic here
          # Example: railway up --service-name=i-know-production

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Prepare deployment info
        run: |
          echo "DEPLOY_STATUS=success" >> $GITHUB_ENV
          if [ "${{ needs.deploy-staging.result }}" = "failure" ] || [ "${{ needs.deploy-production.result }}" = "failure" ]; then
            echo "DEPLOY_STATUS=failure" >> $GITHUB_ENV
          fi

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ env.DEPLOY_STATUS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging**: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
